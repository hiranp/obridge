package {{packageName}};

import oracle.jdbc.OracleConnection;
import java.sql.Array;

{{#configuration.jakarta}}
import jakarta.annotation.Generated;
{{/configuration.jakarta}}
{{^configuration.jakarta}}
import javax.annotation.Generated;
{{/configuration.jakarta}}
import java.math.BigDecimal;
import java.sql.Array;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Generated("org.obridge.generators.ConverterObjectGenerator")
public final class PrimitiveTypeConverter {
    
    private PrimitiveTypeConverter() {
    }

    public static Array getListArray(List o, Connection c, String typeName) throws SQLException {
        OracleConnection connection = c.unwrap(OracleConnection.class);

        if (o == null) {
            return connection.createOracleArray(typeName, new Object[0]);
        }
        List<Object> array = new ArrayList<Object>(o.size());
        for (Object e : o) {
            array.add(e);
        }
        return connection.createOracleArray(typeName, array.toArray());
    }

    public static <T> List<T> asList(Array array, Class<T> targetClass) throws SQLException {


        if (targetClass.equals(Integer.class)) {
            List<T> r = new ArrayList<T>();

            final BigDecimal[] baseArray = (BigDecimal[]) array.getArray();

            for (BigDecimal b : baseArray) {
                r.add((T) new Integer(b.intValue()));
            }

            return r;

        } else {
            return Arrays.asList((T[]) array.getArray());
        }

    }

}
